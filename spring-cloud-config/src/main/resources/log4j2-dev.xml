<?xml version="1.0" encoding="UTF-8" ?>
<!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->
<!--Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出-->
<!--monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身，设置间隔秒数-->
<!--shutdownHook:指定当JVM停止的时候，Log4j是否应该停止。停止钩子默认是启用的，也可以通过设置这个属性点值为disable来禁用它，这样我们就可以完全记录应用的整个生命周期。-->
<!--monitorInterval="3600" 指log4j2每隔 3600 秒（1小时），自动监控该配置文件是否有变化，如果变化，则自动根据文件内容重新配置。-->
<Configuration status="WARN" monitoringInterval="3600" shutdownHook="disable">
    <Properties>
        <Property name="log-path">logs</Property>
        <Property name="all-json-logger">all-json-logger</Property>
        <Property name="framework-logger">framework-logger</Property>
        <Property name="business-logger">business-logger</Property>
    </Properties>
    <Appenders>
        <!--控制台日志输出设置 start-->
        <Console name="to-console" target="SYSTEM_OUT">
            <PatternLayout pattern="[%d{yyyy-MM-dd HH:mm:ss.SSS}] -- [%p] -- [%thread >>>> %F:%L >>>> Method = %M] -- [Content = %m]%n"/>
        </Console>
        <!--控制台日志输出设置 end-->
        <!--文件日志输出设置 start-->
        <!--filePattern：表示当日志到达指定的大小或者时间，产生新日志时，旧日志的命名路径。-->
        <!--Policies：策略，表示日志什么时候应该产生新日志，可以有时间策略和大小策略等-->
        <RollingFile name="${framework-logger}" fileName="${log-path}/${framework-logger}.log" append="true" filePattern="${log-path}/$${date:yyyy-MM}/${framework-logger}-%d{yyyy-MM-dd}-%i.log.gz">
            <PatternLayout pattern="[%d{yyyy-MM-dd HH:mm:ss.SSS}] -- [%p] -- [%thread >>>> %F:%L >>>> Method = %M] -- [Content = %m]%n"/>
            <Policies>
                <OnStartupTriggeringPolicy/>
                <SizeBasedTriggeringPolicy size="10 MB"/><!-- 每到10M生成一个日志文件 -->
                <TimeBasedTriggeringPolicy interval="1" modulate="true"/><!-- 每天生成一个日志文件 -->
            </Policies>
            <DefaultRolloverStrategy max="30" /><!-- 最大保存文件数 -->
        </RollingFile>

        <RollingFile name="${business-logger}" fileName="${log-path}/${business-logger}.log" append="true" filePattern="${log-path}/$${date:yyyy-MM}/${business-logger}-%d{yyyy-MM-dd}-%i.log.gz">
            <PatternLayout pattern="[%d{yyyy-MM-dd HH:mm:ss.SSS}] -- [%p] -- [%thread >>>> %F:%L >>>> Method = %M] -- [Content = %m]%n"/>
            <Policies>
                <OnStartupTriggeringPolicy/>
                <SizeBasedTriggeringPolicy size="10 MB"/><!-- 每到10M生成一个日志文件 -->
                <TimeBasedTriggeringPolicy interval="1" modulate="true"/><!-- 每天生成一个日志文件 -->
            </Policies>
            <DefaultRolloverStrategy max="30" /><!-- 最大保存文件数 -->
        </RollingFile>

        <RollingFile name="${all-json-logger}"  fileName="${log-path}/${all-json-logger}.log" append="true" filePattern="${log-path}/$${date:yyyy-MM}/${all-json-logger}-%d{yyyy-MM-dd}-%i.log.gz">
            <!--compact="true" 表示对 JSON 进行压缩-->
            <JsonLayout compact="true" eventEol="true"/>
            <Policies>
                <OnStartupTriggeringPolicy/>
                <SizeBasedTriggeringPolicy size="30 MB"/><!-- 每到10M生成一个日志文件 -->
                <TimeBasedTriggeringPolicy interval="1" modulate="true"/><!-- 每天生成一个日志文件 -->
            </Policies>
            <DefaultRolloverStrategy max="20" /><!-- 最大保存文件数 -->
        </RollingFile>
        <!--文件日志输出设置 end-->
    </Appenders>
    <!--监控日志的位置设置 start-->
    <Loggers>
        <Root level="debug">
            <AppenderRef ref="to-console"/>
        </Root>
        <!--additivity 字段，通过配置该字段，我们可以规定是否将日志事件传递到 Logger 的父结点处理，其默认值为true（即默认交给parent Logger处理）-->
        <Logger name="org.springframework" level="info" additivity="false">
            <AppenderRef ref="to-console"/>
            <AppenderRef ref="${all-json-logger}"/>
            <AppenderRef ref="${framework-logger}"/>
        </Logger>
        <Logger name="com.gitnavi" level="debug" additivity="false">
            <AppenderRef ref="to-console"/>
            <AppenderRef ref="${all-json-logger}"/>
            <AppenderRef ref="${business-logger}"/>
        </Logger>
    </Loggers>
    <!--监控日志的位置设置 end-->
</Configuration>